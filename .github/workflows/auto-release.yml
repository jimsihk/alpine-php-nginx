name: Identify changes, tag and release

on:
  workflow_call:
    inputs:
      image:
        required: true
        type: string
    secrets:
      RELEASE_BOT_APP_ID:
        required: true
      RELEASE_BOT_PRIVATE_KEY:
        required: true

permissions:
  contents: write

jobs:
  auto-tagging:
    runs-on: ubuntu-latest
    steps:
      - name: Generate release token
        id: generate_release_token
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.RELEASE_BOT_APP_ID }}
          private_key: ${{ secrets.RELEASE_BOT_PRIVATE_KEY }}

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          token: ${{ steps.generate_release_token.outputs.token }}

      - name: Load tag history and suggest next tag
        id: analyze_tag_history
        uses: anothrNick/github-tag-action@1.66.0
        env:
          GITHUB_TOKEN: ${{ steps.generate_release_token.outputs.token }}
          WITH_V: false
          DRY_RUN: true
          DEFAULT_BUMP: patch
          RELEASE_BRANCHES: ${{ vars.RELEASE_BRANCHES }}

      - name: Set next version
        id: next_tag_version
        run: |
          echo "new_tag=${{ steps.analyze_tag_history.outputs.new_tag }}" >> $GITHUB_OUTPUT
          echo "previous_tag=${{ steps.analyze_tag_history.outputs.tag }}" >> $GITHUB_OUTPUT

      - name: Get container PHP version
        id: php_version
        run: |
          docker run -i ${{ inputs.image }} php -r 'echo phpversion();' > version.txt
          # e.g. 8.0.27
          PHP_V=$(cat version.txt)
          PHP_MAJOR=$(echo $PHP_V | sed 's/ //g' | cut -d'.' -f1)
          PHP_MINOR=$(echo $PHP_V | sed 's/ //g' | cut -d'.' -f2)
          PHP_PATCH=$(echo $PHP_V | sed 's/ //g' | cut -d'.' -f3)
          echo "full=${PHP_V}" >> $GITHUB_OUTPUT

          # format PHP version number to tag format
          # <major><minor>.<patch (leading zero removed)>.0
          # e.g. 8.0.27 --> 80.27.0
          PHP_TAG="$PHP_MAJOR$PHP_MINOR.$PHP_PATCH.0"
          echo "tag=${PHP_TAG}" >> $GITHUB_OUTPUT

          echo "PHP Major version: ${PHP_MAJOR}"
          echo "PHP Minor version: ${PHP_MINOR}"
          echo "PHP Patch version: ${PHP_PATCH}"
          echo "Container tag: ${PHP_TAG}"

      - name: Determine change
        id: get_changes
        run: |
          echo "[${{ steps.php_version.outputs.tag }}] vs [${{ steps.next_tag_version.outputs.new_tag }}]"
          if [ -n "${{ steps.next_tag_version.outputs.new_tag }}" ]
          then
            # Compare up to minor version
            PREFIX_PHP_TAG=`echo ${{ steps.php_version.outputs.tag }} | cut -d'.' -f1,2`
            PREFIX_NEW_TAG=`echo ${{ steps.next_tag_version.outputs.new_tag }} | cut -d'.' -f1,2`
            if [ "$PREFIX_PHP_TAG" = "$PREFIX_NEW_TAG" ];
            then
              # same PHP minor version
              echo "Use ${{ steps.next_tag_version.outputs.new_tag }}"
              echo "new_tag=${{ steps.next_tag_version.outputs.new_tag }}" >> $GITHUB_OUTPUT
            else
              # PHP minor version changed
              echo "Use ${{ steps.php_version.outputs.tag }}"
              echo "new_tag=${{ steps.php_version.outputs.tag }}" >> $GITHUB_OUTPUT
            fi
          else
            echo "No change is detected"
            echo "new_tag=${{ steps.next_tag_version.outputs.previous_tag }}" >> $GITHUB_OUTPUT
          fi

      - name: Generate release name
        id: release_detail
        run: |
          R1="${{ steps.php_version.outputs.full }}"
          R2=`echo "${{ steps.get_changes.outputs.new_tag }}" | cut -d'.' -f3`
          R_NAME="v$R1-$R2"
          echo "release_name=$R_NAME" >> $GITHUB_OUTPUT
          echo "Release name: $R_NAME"

      - name: Get commit SHA of last tag and last commit
        id: get_commit_sha
        run: |
          LAST_TAG=`git describe --tags $(git rev-list --tags --max-count=1)`
          LAST_TAG_COMMIT=`git rev-list -n 1 $LAST_TAG`
          echo "previous_tag=$LAST_TAG_COMMIT" >> $GITHUB_OUTPUT
          echo "Last tag at $LAST_TAG with SHA $LAST_TAG_COMMIT"
          #Also get last commit before using tj-actions/changed-files as it assumed the commit hash must be different or error will be returned
          LAST_COMMIT=$(git rev-parse HEAD)
          echo "last_commit=$LAST_COMMIT" >> $GITHUB_OUTPUT
          echo "Last commit SHA is $LAST_COMMIT"

      - name: Get changed container files
        if: steps.get_commit_sha.outputs.previous_tag != steps.get_commit_sha.outputs.last_commit
        id: changed-files
        uses: tj-actions/changed-files@v36.0.3
        with:
          base_sha: ${{ steps.get_commit_sha.outputs.previous_tag }}
          files: |
            rootfs/**
            Dockerfile

      - name: List changed files since last tag
        run: |
          echo "Any files changed? ${{ steps.changed-files.outputs.any_changed }}"
          echo "Changed files: ${{ steps.changed-files.outputs.all_changed_files }}"

      - name: Tag and create a GitHub release
        if: steps.changed-files.outputs.any_changed == 'true'
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.get_changes.outputs.new_tag }}
          commit: ${{ github.sha }}
          name: ${{ steps.release_detail.outputs.release_name }}
          skipIfReleaseExists: true
          allowUpdates: false
          generateReleaseNotes: true
          token: ${{ steps.generate_release_token.outputs.token }}